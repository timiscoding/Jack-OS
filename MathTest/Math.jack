// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  static Array twoToThe;

  // this is used to optimise the '2*q*y' part of computing the remainder in the divide algorithm
  // by storing the value, we can compute it without having to do multiplication
  static int qy2;

    /** Initializes the library. */
    function void init() {
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;
      let twoToThe[1] = 2;
      let twoToThe[2] = 4;
      let twoToThe[3] = 8;
      let twoToThe[4] = 16;
      let twoToThe[5] = 32;
      let twoToThe[6] = 64;
      let twoToThe[7] = 128;
      let twoToThe[8] = 256;
      let twoToThe[9] = 512;
      let twoToThe[10] = 1024;
      let twoToThe[11] = 2048;
      let twoToThe[12] = 4096;
      let twoToThe[13] = 8192;
      let twoToThe[14] = 16384;
      // Hack computer uses a 2s complement 16 bit number system so the range is [-32768, 32767]
      // which means 32768 is actually -32768
      let twoToThe[15] = ~32767;
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    function int bit(int num, int index) {
      // powers of 2 are normally positively increasing numbers but since we're dealing with
      // 2s complement system, 2^15 is represented as -32768 so we have to check for a non zero value
      if (~((twoToThe[index] & num) = 0)) {
        return 1;
      }
      return 0;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int sum, shiftedX, i, wordWidth;
      let wordWidth = 16;
      let shiftedX = x;

      while (i < wordWidth) {
        if (Math.bit(y, i) = 1) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let i = i + 1;
      }
      return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the division operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      if ((x > 0) & (y < 0) | (x < 0) & (y > 0)) {
        return -Math.udivide(Math.abs(x), Math.abs(y));
      } else {
        return Math.udivide(Math.abs(x), Math.abs(y));
      }
    }

    function int udivide(int x, int y) {
      var int q;

      // as y is doubled with every recursive call, it can overflow so when there's a change in
      // y's sign, we assume y > x
      if ((y > x) | (y < 0)) {
        let qy2 = 0;
        return 0;
      }

      let q = Math.udivide(x, y + y);

      // when the remainder of the previous call (ie. 'x - qy2') is smaller than the current 'y',
      // the next quotient is exactly double. when it is larger, we have to increment because
      // the remainder divides the current 'y' 1 times. the remainder is always going to be bounded by
      // 0 <= r < 2y, so we are assured it will divide 0 or 1 times.
      if ((x - qy2) < y) {
        return q + q;
      } else {
        let qy2 = qy2 + y;
        return q + q + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      return 0;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      } else {
        return b;
      }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      } else {
        return b;
      }
    }
}
