// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int KBD; // keyboard memory map
    static char ASCII_ENTER, ASCII_BACKSPACE, ASCII_0, ASCII_9, ASCII_HYPHEN;

    /** Initializes the keyboard. */
    function void init() {
      let KBD = 24576;
      let ASCII_ENTER = 128;
      let ASCII_BACKSPACE = 129;
      let ASCII_0 = 48;
      let ASCII_9 = 57;
      let ASCII_HYPHEN = 45;
      return;
    }

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
      return Memory.peek(KBD);
    }

    /**
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character
     * of the pressed key.
     */
    function char readChar() {
      var char c;
      while (c = 0) {
        let c = Keyboard.keyPressed();
      }
      while (~(Keyboard.keyPressed() = 0)) {}

      if ((c > 31) & (c < 127)) { // only display printable chars
        do Output.printChar(c);
      }

      return c;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
      var char c;
      var String str;

      let str = String.new(50);
      do Output.printString(message);
      while (~(c = ASCII_ENTER)) {
        let c = Keyboard.readChar();
        if (c = ASCII_BACKSPACE) {
          do str.eraseLastChar();
          do Output.backSpace();
        } else {
          if ((str.length() < 50) & (c > 31) & (c < 127)) {
            do str.appendChar(c);
          } else { // character buffer full
            do Sys.error(1000);
          }
        }
      }
      do Output.println();
      return str;
    }

    /**
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces.
     */
    function int readInt(String message) {
      var String str;
      var char c;
      var int num, i;
      var boolean parseNums, isNegative;

      let str = Keyboard.readLine(message);
      let parseNums = true;
      let isNegative = false;

      while ((i < str.length()) & parseNums) {
        let c = str.charAt(i);
        if ((i = 0) & (c = ASCII_HYPHEN)) {
          let isNegative = true;
        } else {
          if ((c < ASCII_0) | (c > ASCII_9)) {
            let parseNums = false;
          } else {
            let num = num * 10 + (c - ASCII_0);
          }
        }
        let i = i + 1;
      }

      if (isNegative) {
        let num = -num;
      }
      return num;
    }
}
