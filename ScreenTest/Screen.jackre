// reverse engineering Screen.vm from the nand2tetris OS s/w suite

s0 = Array.new(17)
s0[0] = 1

while (l0 < 16) {
  l0 = l0 + 1

  s0[l0] = s0[l0 - 1] + s0[l0 - 1]


}

s1 = 16384

s2 = true;

function void drawPixel(int x, int y) {
  var l0, l1, l2;

  if ((x < 0) | (x > 511)) | (y < 0) | (y > 255) {
    do Sys.error(7)
  } else {
    l0 = x / 16
    l1 = x - l0 * 16
    l2 = y * 32 + l0
    do Screen.updateLocation(l2, s0[l1])
  }

  return
}

function void updateLocation(int a0, int a1) {
  if (s2) {
    s1[a0] = s1[a0] | a1
  } else {
    s1[a0] = s1[a0] & ~a1
  }

  return
}

function void drawLine(int x1, int y1, int x2, int y2) {
  var l0, l1, l2, dx, l4, l5, l6, l7, l8, l9, l10

  if ((x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255)) {
    do Sys.error(8)
  } else {
    dx = Math.abs(x2 - x1)
    dy = Math.abs(y2 - y1)
    l6 = dx < dy

    if (l6 & (y2 < y1) | (~l6 & (x2 < x1))) {
      l4 = x1
      x1 = x2
      x2 = l4
      l4 = y1
      y1 = y2
      y2 = l4
    } else {
      if (l6) {
        l4 = dx
        dx = dy
        dy = l4
        l1 = y1
        l0 = x1
        l8 = y2
        l7 = x1 > x2
      } else {
        l1 = x1
        l0 = y1
        l8 = x2
        l7 = y1 > y2
      }

      l5 = (2 * dy) - dx
      l9 = (2 * dy)
      l10 = 2 * (dy - dx)
      do Screen.drawConditional(l1, l0, l6)

      while (l1 < l8) {
        if (l5 < 0) {
          l5 = l5 + l9
        } else {
          l5 = l5 + l10
          if (l7) { IF4
            l0 = l0 - 1
          } else {
            l0 = l0 + 1
          }
        }
        l1 = l1 + 1
        do Screen.drawConditional(l1, l0, l6)
      }
    }
  }

}
