// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 *
 * This class doesn't use Memory.peek and poke as suggested in the coursera learning material
 * because it saves a few extra VM commands that call the functions. Instead, we manipulate
 * the array directly starting from the screen memory map base address.
 *
 */
class Screen {
    static Array screen;
    static boolean isBlack;
    static Array twoToThe;
    static Array buffer;

    /** Initializes the Screen. */
    function void init() {
      var int i;
      let screen = 16384;
      let isBlack = true;
      let twoToThe = Array.new(16);
      let twoToThe[0] = 1;

      while (i < 16) {
        let i = i + 1;
        let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
      }
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;

      while (i < 8192) {
        let screen[i] = 0;
        let i = i + 1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      if (b) {
        let isBlack = true;
      } else {
        let isBlack = false;
      }
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int addr, word;

      let addr = (y * 32) + (x / 16);
      if (isBlack) {
        let screen[addr] = screen[addr] | twoToThe[x & 15]; // set x to 1 in the word
      } else {
        let screen[addr] = screen[addr] & ~twoToThe[x & 15];
      }

      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color.
     * diff = width * dy - height * dx
    */
    function void drawLine(int x1, int y1, int x2, int y2) {
      if ((x1 < 0) | (x2 < 0) | (x1 > 511) | (x2 > 511) | (y1 < 0) | (y2 < 0) | (y1 > 255) | (y2 > 255)) {
        do Sys.error(5);
      } else {
        if ((x1 = x2) | (y1 = y2)) {
          do Screen.drawAxialLine(x1, y1, x2, y2);
        } else {
          do Screen.drawDiagLine(x1, y1, x2, y2);
        }
      }

      return;
    }

    function void drawDiagLine(int x1, int y1, int x2, int y2) {
      var int diff, height, width, dx, dy, right, down, tmp;

      let dy = Math.abs(y2 - y1);
      let dx = Math.abs(x2 - x1);
      let right = x1 < x2;
      let down = y1 < y2;

      if (~right & ~down) {
        let tmp = x1;
        let x1 = x2;
        let x2 = tmp;
        let tmp = y1;
        let y1 = y2;
        let y2 = tmp;
      } else {
        if (~right & down) {
          let tmp = x1;
          let x1 = x2;
          let x2 = tmp;
          let tmp = y1;
          let y1 = y2;
          let y2 = tmp;
        }
      }

      while (~(height > dy) & ~(width > dx)) {
        if (y1 < y2) {
          do Screen.drawPixel(x1 + width, y1 + height);
        } else {
          do Screen.drawPixel(x1 + width, y1 - height);
        }

        if (diff < 0) {
          let width = width + 1;
          let diff = diff + dy;
        } else {
          let height = height + 1;
          let diff = diff - dx;
        }
      }

      return;
    }

    function void drawAxialLine(int x1, int y1, int x2, int y2) {
      var int tmp;

      if ((x1 = x2) & (y1 > y2)) {
        let tmp = y1;
        let y1 = y2;
        let y2 = tmp;
      } else {
        if ((y1 = y2) & (x1 > x2)) {
          let tmp = x1;
          let x1 = x2;
          let x2 = tmp;
        }
      }

      if (x1 = x2) {
        let tmp = y1;
        while (~(tmp > y2)) {
          do Screen.drawPixel(x1, tmp);
          let tmp = tmp + 1;
        }
      } else {
        if (y1 = y2) {
          let tmp = x1;
          while (~(tmp > x2)) {
            do Screen.drawPixel(tmp, y1);
            let tmp = tmp + 1;
          }
        }
      }

      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int dx, dy, i;

      let dx = Math.abs(x2 - x1);
      let dy = Math.abs(y2 - y1);
      if (dx < dy) {
        let i = x1;
        while (~(i > x2)) {
          do Screen.drawAxialLine(i, y1, i, y2);
          let i = i + 1;
        }
      } else {
        let i = y1;
        while (~(i > y2)) {
          do Screen.drawAxialLine(x1, i, x2, i);
          let i = i + 1;
        }
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dy, dx, row;

      if (r > 180) { // prevent overflow
        do Sys.error(2);
      } else {
        let dy = -r;
        while (~(dy > r)) {
          let dx = Math.sqrt((r * r) - (dy * dy));
          let row = y + dy;
          do Screen.drawAxialLine(x - dx, row, x + dx, row);
          let dy = dy + 1;
        }
      }
      return;
    }
}
