// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array string;
  field int length;

  /** constructs a new empty string with a maximum length of maxLength
    *  and initial length of 0. */
  constructor String new(int maxLength) {
    if (maxLength > 0) {
      let string = Array.new(maxLength);
    }
    let length = 0;
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    if (~(string = null)) { // only dispose array if it was constructed
      do string.dispose();
    }
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return length;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    return string[j];
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    let string[j] = c;
    return;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    let string[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    let length = length - 1;
    return;
  }

  /** Returns the integer value of this string,
    *  until a non-digit character is detected. */
  method int intValue() {
    var int i, num;
    var boolean parseInt, isNegative;

    let parseInt = true;
    let isNegative = false;
    while ((i < length) & parseInt) {
      if ((i = 0) & (string[i] = 45)) { // first char is hyphen
        let isNegative = true;
      } else {
        if (string[i] < 48 | string[i] > 57) { // not a number
          let parseInt = false;
        } else {
          let num = num * 10 + string[i] - 48;
        }
      }
      let i = i + 1;
    }

    if (isNegative) {
      let num = -num;
    }
    return num;
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    let length = 0;
    if (val < 0) {
      do appendChar(45); // ascii hyphen
      let length = 1;
      let val = Math.abs(val);
    }
    do int2str(val);
    return;
  }

  method String int2str(int val) {
    var int c;
    var int rem;
    var String str;

    let rem = val - ((val / 10) * 10); // val % 10
    let c = 48 + rem; // ascii '0' + rem
    if (val < 10) {
      return appendChar(c);
    } else {
      let str = int2str(val / 10);
      return str.appendChar(c);
    }
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }
}
